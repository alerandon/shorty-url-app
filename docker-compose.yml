services:
  client:
    container_name: client
    # environment:
    #   CLIENT_VAR: value
    build:
      context: ./apps/client
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 5173:5173
    networks:
      - shortyurl_network
    develop:
      watch:
        - action: sync
          path: ./apps/client/src
          target: /app/client/src
          ignore:
            - node_modules/
            - build/
        - action: rebuild
          path: ./apps/client/package.json
  api:
    container_name: api
    environment:
      API_PORT: ${API_PORT}
      API_DB_USER: ${API_DB_USER}
      API_DB_PASSWORD: ${API_DB_PASSWORD}
      API_DB_HOST: ${API_DB_HOST}
      API_DB_PORT: ${API_DB_PORT}
      API_DB_NAME: ${API_DB_NAME}
      API_JWT_SECRET: ${API_JWT_SECRET}
      API_NODE_ENV: ${API_NODE_ENV}
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - ${API_PORT}:${API_PORT}
    networks:
      - shortyurl_network
    depends_on:
      mongodb:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./apps/api/src
          target: /app/api/src
          ignore:
            - node_modules/
            - build/
        - action: rebuild
          path: ./apps/api/package.json
  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: shorty-url-app
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/mongodb
    networks:
      - shortyurl_network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', 'db.runCommand({ ping: 1 })']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

networks:
  shortyurl_network:
    driver: bridge

volumes:
  mongodb_data:
